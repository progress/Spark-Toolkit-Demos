<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing http authentication control
  -->

<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
     http://www.springframework.org/schema/util
     http://www.springframework.org/schema/util/spring-util.xsd" > 

    <!-- *********************************************************************
         WARNING: EDITS TO THIS FILE MAY BE OVERWRITTEN BY OPENEDGE OEABL
         WEB APPLICATION UPDATE/PATCH PROCESS. CUSTOM EDITS MUST BE MANUALLY
         BACKED UP PRIOR TO ANY UPDATE/PATCH PROCESS EXECUTION.

         MAKE ALL CONFIGURATION EDITS IN THE oeablSecurity.properties FILE.
         ********************************************************************* -->

    <!-- Spring Security authentication process references for <custom-filter> definitions:
         CHANNEL_FILTER
                                        <== OECORSFilter
         SECURITY_CONTEXT_FILTER            /default/
         CONCURRENT_SESSION_FILTER          /default/
         HEADERS_FILTER                     /default/
         CSRF_FILTER                        /default/
         LOGOUT_FILTER                      <logout>
         X509_FILTER                        /default/
         PRE_AUTH_FILTER                <== OEPreauthfilter (Rollbase)
         CAS_FILTER                         /default/
         FORM_LOGIN_FILTER                  <http-form>
                                        <== OESSOFilter
         BASIC_AUTH_FILTER                  <http-basic>
                                        <== customAuthorizationFilter
         SERVLET_API_SUPPORT_FILTER         /default/
         REMEMBER_ME_FILTER                 /default/
         ANONYMOUS_FILTER                   <anonymous>
         SESSION_MANAGEMENT_FILTER          <session-management>
         EXCEPTION_TRANSLATION_FILTER       /default/
         FILTER_SECURITY_INTERCEPTOR        /default/
         SWITCH_USER_FILTER             <== OEClientPrincipalFilter
     -->

    <!-- The HTTP BASIC security for REST is disabled for a SSO pure configuration. -->
    <b:import resource="apsv-none-extern.xml"/> 

    <!-- The HTTP BASIC security for SOAP is disabled for a SSO pure configuration. -->
    <b:import resource="soap-none-extern.xml"/>

    <!-- This HTTP security space represents the public REST application URI
         space and controle the authentication/authorization process to its 
         dynamic/static content.  
     -->

    <http pattern="/rest/**"
          auto-config="true"
          use-expressions="true" 
          create-session="never" 
          access-decision-manager-ref="oauth2AccessDecisionManager"
          entry-point-ref="oauth2ResSvcAuthenticationEntryPoint" >

        <!-- Spring access expression handlers for
             URL authorization evaluation and access denied -->
        <expression-handler ref="oauth2WebExpressionHandler" />
        <access-denied-handler ref="oauth2ResSvcAccessDeniedHandler" />

        <!-- OpenEdge MDC primary filter  -->
        <custom-filter before="CHANNEL_FILTER" 
                       ref="MDCPrimaryFilter" />

        <!-- OpenEdge MDC secondary filter  -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="MDCSecondaryFilter" />

        <!-- Spring OAuth2 resource server authorization header
             filter -->
        <custom-filter before="PRE_AUTH_FILTER" 
                       ref="oauth2ResourceServerFilter" />

         <!-- OpenEdge ClientPrincipal SSO Filter -->
        <custom-filter position="SWITCH_USER_FILTER" 
                       ref="OEClientPrincipalFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- URL access controls 
             NOTE: this filter MUST occur BEFORE the
                   default security-interceptor inserted by the
                   <http auto-config> attribute 
       -->
        <custom-filter ref="oauth2FilterSecurityInterceptor"
                       before="FILTER_SECURITY_INTERCEPTOR" />
        
        <!-- NOTE:  all XML <intercept-url> elements have been
             replaced by the 'restFilterSecurityInterceptor' and
             the oeablSecurityJwt.csv configuration file.
            <intercept-url pattern="/rest/**" 
                       access="hasAnyRole('ROLE_PSCUser')"/>
        --> 

        <anonymous enabled="false" />

        <headers defaults-disabled="false"
                 disabled="false" />

        <!-- login session controls 
             note: comment out if session-creation is stateless -->
        <!--session-management session-fixation-protection="none" /-->

        <!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
        <csrf disabled="true"/>

    </http>
    
  
    <!-- This HTTP security space represents the public WSPD URI
         space and controle the authentication/authorization process to its 
         dynamic/static content.  
     -->
    <http pattern="/web/**"
          auto-config="true" 
          use-expressions="true" 
          create-session="never" 
          access-decision-manager-ref="oauth2AccessDecisionManager"
          entry-point-ref="oauth2ResSvcAuthenticationEntryPoint" >

        <!-- Spring access expression handlers for
             URL authorization evaluation and access denied -->
        <expression-handler ref="oauth2WebExpressionHandler" />
        <access-denied-handler ref="oauth2ResSvcAccessDeniedHandler" />

        <!-- OpenEdge MDC primary filter  -->
        <custom-filter before="CHANNEL_FILTER" 
                       ref="MDCPrimaryFilter" />

        <!-- OpenEdge MDC secondary filter  -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="MDCSecondaryFilter" />

        <!-- Spring OAuth2 resource server authorization header
             filter -->
        <custom-filter before="PRE_AUTH_FILTER" 
                       ref="oauth2ResourceServerFilter" />

         <!-- OpenEdge ClientPrincipal SSO Filter -->
        <custom-filter position="SWITCH_USER_FILTER" 
                       ref="OEClientPrincipalFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- URL access controls
             NOTE: this filter MUST occur BEFORE the
                   default security-interceptor inserted by the
                   <http auto-config> attribute 
       -->
        <custom-filter ref="oauth2FilterSecurityInterceptor"
                       before="FILTER_SECURITY_INTERCEPTOR" />

        <!-- NOTE:  all XML <intercept-url> elements have been
             replaced by the 'webFilterSecurityInterceptor' and
             the oeablSecurityJwt.csv configuration file.
            <intercept-url pattern="/web/**"  
                       access="hasAnyRole('ROLE_PSCUser')"/>
        -->

        <anonymous enabled="false" />

        <headers defaults-disabled="false"
                 disabled="false" />

        <!-- login session controls 
             note: comment out if session-creation is stateless -->
        <!--session-management session-fixation-protection="none" /-->

        <!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
        <csrf disabled="true"/>

    </http>

    <!-- This HTTP security space represents the default public URI
         space and controls the authentication/authorization process to its 
         dynamic/static content.  
     -->
    <http pattern="/**"
          auto-config="true" 
          use-expressions="true" 
          create-session="never" 
          access-decision-manager-ref="oauth2AccessDecisionManager"
          entry-point-ref="oauth2ResSvcAuthenticationEntryPoint" >

        <!-- Standard web-application root for public data like index.html 
             DO NOT grant /** permitAll() access  -->

        <!-- Spring access expression handlers for
             URL authorization evaluation and access denied -->
        <expression-handler ref="oauth2WebExpressionHandler" />
        <access-denied-handler ref="oauth2ResSvcAccessDeniedHandler" />

        <!-- OpenEdge MDC primary filter  -->
        <custom-filter before="CHANNEL_FILTER" 
                       ref="MDCPrimaryFilter" />

        <!-- OpenEdge MDC secondary filter  -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="MDCSecondaryFilter" />

        <!-- Spring OAuth2 resource server authorization header
             filter -->
        <custom-filter before="PRE_AUTH_FILTER" 
                       ref="oauth2ResourceServerFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- URL access controls 
             NOTE: this filter MUST occur BEFORE the
                   default security-interceptor inserted by the
                   <http auto-config> attribute 
       -->
        <custom-filter ref="oauth2FilterSecurityInterceptor"
                       before="FILTER_SECURITY_INTERCEPTOR" />

        <!-- NOTE: All <intercept-url> elments have been replaced by 
             'defaultFilterSecurityInterceptor' and the 
             oeablSecurityJwt.csv configuration file. -->

        <anonymous enabled="false" />

        <headers defaults-disabled="false"
                 disabled="false" />

        <!-- login session controls 
             note: comment out if session-creation is stateless -->
        <!--session-management session-fixation-protection="none" /-->

        <!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
        <csrf disabled="true"/>

    </http>

    <oauth:resource-server id="oauth2ResourceServerFilter" 
        resource-id="${oauth2.resSvc.audience}" 
        stateless="${oauth2.resSvc.stateless}"
        token-services-ref="${oauth2.resSvc.tokenServices}ResourceTokenServices"
        entry-point-ref="oauth2ResSvcAuthenticationEntryPoint" />

    <b:bean id="oeOAuth2ExceptionRenderer"
          class="com.progress.appserv.services.security.OEOAuth2ExceptionRenderer" >
    </b:bean>

    <b:bean id="oauth2ResSvcAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <b:property name="realmName" value="${oauth2.resSvc.realmName}"/>
        <b:property name="exceptionRenderer" ref="oeOAuth2ExceptionRenderer" />
    </b:bean>

    <b:bean id="oauth2ResSvcAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" >
        <b:property name="exceptionRenderer" ref="oeOAuth2ExceptionRenderer" />
    </b:bean>

    <b:import resource="${oauth2.resSvc.clientCfg}"/> 

</b:beans>
