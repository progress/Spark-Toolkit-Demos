<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing http authentication control
  -->

<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    
    <!-- *********************************************************************
         WARNING: EDITS TO THIS FILE MAY BE OVERWRITTEN BY OPENEDGE OEABL
         WEB APPLICATION UPDATE/PATCH PROCESS. CUSTOM EDITS MUST BE MANUALLY
         BACKED UP PRIOR TO ANY UPDATE/PATCH PROCESS EXECUTION.

         MAKE ALL CONFIGURATION EDITS IN THE oeablSecurity.properties FILE.
         ********************************************************************* -->

    <!-- Spring Security authentication process references for <custom-filter> definitions:
         CHANNEL_FILTER
                                        <== OECORSFilter
         SECURITY_CONTEXT_FILTER            /default/
         CONCURRENT_SESSION_FILTER          /default/
         HEADERS_FILTER                     /default/
         CSRF_FILTER                        /default/
         LOGOUT_FILTER                      <logout>
         X509_FILTER                        /default/
         PRE_AUTH_FILTER                <== OEPreauthfilter (Rollbase)
         CAS_FILTER                         /default/
                                        <== OESSORefreshFilter
         FORM_LOGIN_FILTER                  <http-form>
                                        <== OESSOFilter
         BASIC_AUTH_FILTER                  <http-basic>
         SERVLET_API_SUPPORT_FILTER         /default/
         REMEMBER_ME_FILTER                 /default/
         ANONYMOUS_FILTER                   <anonymous>
         SESSION_MANAGEMENT_FILTER          <session-management>
         EXCEPTION_TRANSLATION_FILTER       /default/
         FILTER_SECURITY_INTERCEPTOR        /default/
         SWITCH_USER_FILTER             <== OEClientPrincipalFilter

          Note: The initial release of the OESSOFilter requires the 
          HTTP Session support for enabling refreshing OECP tokens.
          Therefore the <http create-session attribute is set to
          "always"
     -->

    <!-- To enable HTTP BASIC security for APSV, set apsv.security.enable=basic 
         in WEB-INF/oeablSecurity.properties file-->
    <b:import resource="apsv-${apsv.security.enable}-extern.xml"/> 

    <!-- To enable HTTP BASIC   security for SOAP, set soap.security.enable=basic 
         in WEB-INF/oeablSecurity.properties file-->
    <b:import resource="soap-${soap.security.enable}-extern.xml"/>

 
    <!-- This HTTP security space represents the REST service and controls 
         the authentication/authorization process to its dynamic/static content.  
    -->
    <http pattern="/rest/**"
          auto-config="false" 
          use-expressions="true" 
          create-session="always" 
          disable-url-rewriting="true" 
          authentication-manager-ref="${http.rest.authmanager}" 
          entry-point-ref="OEFormEntryPoint"
          realm="${http.rest.realm}" >

        <!-- Spring access expression handler for
             URL authorization evaluation -->
        <expression-handler ref="DefaultWebExpressionHandler" />

        <!-- OpenEdge MDC primary filter  -->
        <custom-filter before="CHANNEL_FILTER" 
                       ref="MDCPrimaryFilter" />

        <!-- OpenEdge MDC secondary filter  -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="MDCSecondaryFilter" />
        <custom-filter after="SECURITY_CONTEXT_FILTER" 
                       ref="MDCSecondaryFilter" />
            
        <!-- OpenEdge PRE AUTH Filter  -->
        <custom-filter position="PRE_AUTH_FILTER" 
                       ref="OEPreauthfilter" />

        <!-- OpenEdge SSO Authorization header Filter -->
        <custom-filter before="BASIC_AUTH_FILTER"
                       ref="OESSOFilter" />

          <!-- OpenEdge ClientPrincipal SSO Filter -->
        <custom-filter after="SWITCH_USER_FILTER" 
                       ref="OEClientPrincipalFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- URL access controls 
             NOTE: this filter MUST occur BEFORE the
                   default security-interceptor inserted by the
                   <http auto-config> attribute -->
        <custom-filter ref="restFilterSecurityInterceptor"
                       before="FILTER_SECURITY_INTERCEPTOR" />
        
        <!-- URL access controls -->

        <!-- NOTE:  all XML <intercept-url> elements have been
             replaced by the 'restFilterSecurityInterceptor' and
             the oeablSecurity.csv configuration file.
        <intercept-url pattern="/rest/**" 
                       access="hasAnyRole('ROLE_PSCUSER')"/>
        -->

        <!-- authentication model -->
        <form-login login-page="${http.formlogin.loginpage}"
                    login-processing-url="${http.formlogin.loginurl}"
                    always-use-default-target="false"
                    default-target-url="${http.formlogin.defaulturl}"
                    username-parameter="${http.formlogin.usernamefield}"
                    password-parameter="${http.formlogin.userpasswordfield}"
                    authentication-failure-url="${http.formlogin.failureurl}"
                    authentication-success-handler-ref="OEAuthnSuccessHandler" 
                    authentication-failure-handler-ref="OEAuthnFailureHandler"  />

        <logout logout-url="${http.logout.url}"
                success-handler-ref="OELogoutSuccessHandler"
                invalidate-session="true" 
                delete-cookies="${http.logout.deletecookie}" />

        <headers defaults-disabled="false"
                 disabled="false" />

        <!--  
        <remember-me />
        -->

        <!-- error handlers -->
        <access-denied-handler ref="OEAccessDeniedHandler" />

        <!-- login session controls -->
        <session-management session-fixation-protection="newSession" />

        <!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
        <csrf disabled="true"/>
        

    </http>
    
    <!-- This HTTP security space represents the WSPD and controls 
         the authentication/authorization process to its dynamic/static content.  
     -->
    <http pattern="/web/**"
          auto-config="false" 
          use-expressions="true" 
          create-session="always" 
          disable-url-rewriting="true" 
          authentication-manager-ref="${http.web.authmanager}" 
          entry-point-ref="OEFormEntryPoint"
          realm="${http.rest.realm}" >

        <!-- Spring access expression handler for
             URL authorization evaluation -->
        <expression-handler ref="DefaultWebExpressionHandler" />

        <!-- OpenEdge MDC primary filter  -->
        <custom-filter before="CHANNEL_FILTER" 
                       ref="MDCPrimaryFilter" />

        <!-- OpenEdge MDC secondary filter  -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="MDCSecondaryFilter" />
        <custom-filter after="SECURITY_CONTEXT_FILTER" 
                       ref="MDCSecondaryFilter" />

        <!-- OpenEdge PRE AUTH Filter  -->
        <custom-filter position="PRE_AUTH_FILTER" 
                       ref="OEPreauthfilter" />

        <!-- OpenEdge ClientPrincipal SSO Filter -->
        <custom-filter after="SWITCH_USER_FILTER" 
                       ref="OEClientPrincipalFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- OpenEdge SSO Authorization header Filter -->
        <custom-filter before="BASIC_AUTH_FILTER"
                       ref="OESSOFilter" />

        <!-- URL access controls 
             NOTE: this filter MUST occur BEFORE the
                   default security-interceptor inserted by the
                   <http auto-config> attribute -->
        <custom-filter ref="webFilterSecurityInterceptor"
                       before="FILTER_SECURITY_INTERCEPTOR" />
        
         <!-- URL access controls -->
        <!-- NOTE:  all XML <intercept-url> elements have been
             replaced by the 'webFilterSecurityInterceptor' and
             the oeablSecurity.csv configuration file.
            <intercept-url pattern="/web/**"  
                       access="hasAnyRole('ROLE_PSCUSER')"/>
        -->

        <!-- authentication model -->
        <form-login login-page="${http.formlogin.loginpage}"
                    login-processing-url="${http.formlogin.loginurl}"
                    always-use-default-target="false"
                    default-target-url="${http.formlogin.defaulturl}"
                    username-parameter="${http.formlogin.usernamefield}"
                    password-parameter="${http.formlogin.userpasswordfield}"
                    authentication-failure-url="${http.formlogin.failureurl}"
                    authentication-success-handler-ref="OEAuthnSuccessHandler" 
                    authentication-failure-handler-ref="OEAuthnFailureHandler"  />

        <logout logout-url="${http.logout.url}"
                success-handler-ref="OELogoutSuccessHandler"
                invalidate-session="true"
                delete-cookies="${http.logout.deletecookie}" />

        <headers defaults-disabled="false"
                 disabled="false" />

        <!--  
        <remember-me />
        -->

        <!-- error handlers -->
        <access-denied-handler ref="OEAccessDeniedHandler" />

        <!-- login session controls -->
        <session-management session-fixation-protection="newSession" />

        <!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
        <csrf disabled="true"/>

    </http>

    <!-- This HTTP security space represents the default public URI
         space and controls the authentication/authorization process to its 
         dynamic/static content.  
         NB:  Define Role names in the <intercept-url> as UPPERCASE because 
         Spring Security LDAP bean will always UPPERCASE the role name
         it obtains from the LDAP directory service. 
     -->

    <http pattern="/**"
          auto-config="false" 
          use-expressions="true" 
          create-session="always"
          disable-url-rewriting="true" 
          authentication-manager-ref="${http.authmanager}" 
          entry-point-ref="OEFormEntryPoint" 
          realm="${http.realm}" >

        <!-- Spring access expression handler for
             URL authorization evaluation -->
        <expression-handler ref="DefaultWebExpressionHandler" />

        <!-- OpenEdge MDC primary filter  -->
        <custom-filter before="CHANNEL_FILTER" 
                       ref="MDCPrimaryFilter" />

        <!-- OpenEdge MDC secondary filter  -->
        <custom-filter after="SESSION_MANAGEMENT_FILTER" 
                       ref="MDCSecondaryFilter" />
        <custom-filter after="SECURITY_CONTEXT_FILTER" 
                       ref="MDCSecondaryFilter" />

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

        <!-- OpenEdge SSO Authorization header Filter -->
        <custom-filter before="BASIC_AUTH_FILTER"
                       ref="OESSOFilter" />

        <!-- OpenEdge SSO Token Refresh filter. Only
             define for the URL space that includes
             the configured Refresh URI -->
        <custom-filter before="FORM_LOGIN_FILTER"
                       ref="OESSORefreshFilter" />
             
        <!-- URL access controls 
             NOTE: this filter MUST occur BEFORE the
                   default security-interceptor inserted by the
                   <http auto-config> attribute -->
        <custom-filter ref="defaultFilterSecurityInterceptor"
                       before="FILTER_SECURITY_INTERCEPTOR" />
        
        <!-- URL access controls -->

        <!-- NOTE: All <intercept-url> elments have been replaced by 
             'defaultFilterSecurityInterceptor' and the 
             oeablSecurity.csv configuration file. -->

        <!-- authentication model -->
        <form-login login-page="${http.formlogin.loginpage}"
                    login-processing-url="${http.formlogin.loginurl}"
                    always-use-default-target="false"
                    default-target-url="${http.formlogin.defaulturl}"
                    username-parameter="${http.formlogin.usernamefield}"
                    password-parameter="${http.formlogin.userpasswordfield}"
                    authentication-failure-url="${http.formlogin.failureurl}"
                    authentication-success-handler-ref="OEAuthnSuccessHandler" 
                    authentication-failure-handler-ref="OEAuthnFailureHandler"  />

        <logout logout-url="${http.logout.url}"
                success-handler-ref="OELogoutSuccessHandler"
                invalidate-session="true" 
                delete-cookies="${http.logout.deletecookie}" />

        <headers defaults-disabled="false"
                 disabled="false" />

        <!--  
        <remember-me />
        -->

        <!-- error handlers -->
        <access-denied-handler ref="OEAccessDeniedHandler" />

        <!-- login session controls -->
        <session-management session-fixation-protection="newSession" />

        <!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
        <csrf disabled="true"/>

    </http>

    <!-- Import the Spring Security configuration file fragment that contains
         all of the explict bean declarations for the security process, and
         allows that process to manage the HTTP requests/responses and 
         invoking the user authentication process. --> 
    <b:import resource="authFilters.xml"/> 

    <!-- Import the Spring Security configuration file fragment that contains
         all of the explict bean declarations for all AuthenticationManagers
         invoked by the security process.  The AuthenticationManager definitions
         will perform physical connections to the source of user accounts, validate
         the account exists, its state, and whether the account secret is valid.
         --> 
    <b:import resource="authManagers.xml"/> 

</b:beans>
