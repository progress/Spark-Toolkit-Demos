<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing http authentication control
  -->

<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd 
     http://www.springframework.org/schema/util
     http://www.springframework.org/schema/util/spring-util.xsd" > 
      
    <!-- *********************************************************************
         WARNING: EDITS TO THIS FILE MAY BE OVERWRITTEN BY OPENEDGE OEABL
         WEB APPLICATION UPDATE/PATCH PROCESS. CUSTOM EDITS MUST BE MANUALLY
         BACKED UP PRIOR TO ANY UPDATE/PATCH PROCESS EXECUTION.

         MAKE ALL CONFIGURATION EDITS IN THE oeablSecurity.properties FILE.
         ********************************************************************* -->

    <!-- Import the OpenEdge filters that span all Login Model configuations -->
    <b:import resource="sharedAuthFilters.xml"/> 

    <!-- Authentication manager for OAuth Provider/Resource services that
         will only allow access by users/clients that have been issued
         a token by an authorizaiton service.  It contains just one account
         with an password that cannot be reverse engineered.
     -->
    <authentication-manager id="oauthResourceAuthManager" >
        <authentication-provider>
            <password-encoder ref="bcryptEncoder" />
            <user-service>
                <user name="u1xgu62200xjixlpwdwsw"
                      password="@@@@@@@@@@@@@@@@@@@@@@@@@"
                      locked="true"
                      disabled="true"
                      authorities="none" />
            </user-service>
        </authentication-provider>
    </authentication-manager>

    <!-- The Spring security interceptor that manages the authorization process for
         access to OAuth2 data resources. -->
        <!--
        -->
    <b:bean id="oauth2FilterSecurityInterceptor" 
            class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor" >  
        <b:property name="authenticationManager" ref="${http.authmanager}"/>
        <b:property name="accessDecisionManager" ref="oauth2AccessDecisionManager"/>
        <b:property name="securityMetadataSource" >
            <b:bean id="jwtOEMetadataSource" 
                    name="all"
                    class="com.progress.appserv.services.security.OEMetadataSource" >
                <b:constructor-arg value="all" />
                <b:constructor-arg value="${oauth2.resSvc.requestmatcher}" />
                <b:property name="interceptUrlFilePath" value="${oauth2.resSvc.csvpath}" />
                <b:property name="defaultURL" value="/**" />
                <b:property name="expressionHandler" ref="oauth2WebExpressionHandler" />
            </b:bean>
        </b:property>
    </b:bean>

    <!-- Add the JWT's scope to the normal list of URL access control checking -->
    <b:bean id="oauth2AccessDecisionManager" 
        class="org.springframework.security.access.vote.UnanimousBased">
            <b:constructor-arg>
                <util:list>
                    <b:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                    <b:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                    <b:bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
                        <b:property name="expressionHandler" ref="oauth2WebExpressionHandler"/>
                    </b:bean>
                </util:list>
            </b:constructor-arg>
    </b:bean>

    <b:bean id="oauth2AccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <oauth:web-expression-handler id="oauth2WebExpressionHandler"/>

    <b:bean id="oeOAuth2ExceptionRenderer"
          class="com.progress.appserv.services.security.OEOAuth2ExceptionRenderer" >
    </b:bean>

    <!-- used to validate Bearer JWT [self-contained] tokens without using the
         OAuth2 Client definitions -->
    <b:bean id="jwtResourceTokenServices" 
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <b:property name="tokenStore" ref="${jwtToken.keystore.type}OAuth2TokenStore" />
    </b:bean>

    <!-- used to validate Bearer JWT [self-contained] tokens using the OAuth2 Client definitions -->
    <b:bean id="oauth2ResourceTokenServices" 
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <b:property name="tokenStore" ref="${jwtToken.keystore.type}OAuth2TokenStore"/>
        <b:property name="clientDetailsService" ref="oauth2ResourceClientDetails"/>
    </b:bean>

    <!-- used to validate Bearer JWT [random] tokens by accessing a SQL database shared with
         the Authorization server and obtaining the real JWT token that is stored there -->
    <!-- 
    <b:bean id="jdbcResourceTokenServices" 
        class="org.springframework.security.oauth2.client.token.JdbcClientTokenServices" >
        <b:constructor-arg index="0" ref="oauth2ResSvcDataSource"/>
    </b:bean>

    <b:bean id="oauth2ResSvcDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <b:property name="driverClassName" value="${oauth2.resSvc.jdbcTokenService.driver}" />
        <b:property name="url" value="${oauth2.resSvc.jdbcTokenService.url}" />
        <b:property name="username" value="${oauth2.resSvc.jdbcTokenService.loginId}" />
        <b:property name="password" value="${oauth2.resSvc.jdbcTokenService.loginPwd}" />
    </b:bean>


    <b:bean id="oauth2ResSvcJDBCTokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore" >
    </b:bean>
    -->

    <!-- used to validate Bearer JWT [random] tokens by accessing the Authorization
         server and requesting the real JWT token be returned for authorization -->
    <b:bean id="remoteResourceTokenServices" 
          class="org.springframework.security.oauth2.provider.token.RemoteTokenServices">
          <b:property name="checkTokenEndpointUrl" value="${oauth2.resSvc.remoteTokenService.url}" />
          <b:property name="clientId" value="${oauth2.resSvc.remoteTokenService.loginId}" />
          <b:property name="clientSecret" value="${oauth2.resSvc.remoteTokenService.loginPwd}" />
          <b:property name="tokenName" value="${oauth2.resSvc.remoteTokenService.tokenName}" />
          <b:property name="accessTokenConverter" ref="defaultAccessTokenConverter" />
    </b:bean>


    <!-- OAuth2 in memory token storage -->
    <b:bean id="localOAuth2TokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" >
        <b:property name="flushInterval" value="1000" />
    </b:bean>

    <!-- JWT access token storage and conversion services using HMAC secret-key -->
    <b:bean id="macOAuth2TokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore" >
        <b:constructor-arg index="0" ref="jwtOAuth2TokenConverter"/>
    </b:bean>

    <!-- JWT access token storage and conversion services using jks key stores-->
    <b:bean id="jksOAuth2TokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore" >
        <b:constructor-arg index="0" ref="jwtOAuth2TokenConverter"/>
    </b:bean>

    <!-- JWT access token storage and conversion services using PEM key stores-->
    <b:bean id="pemOAuth2TokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore" >
        <b:constructor-arg index="0" ref="jwtOAuth2TokenConverter"/>
    </b:bean>

    <!-- JWT access token storage and conversion services using JWK [set] key stores-->
<!--
   Original unmodifiable version - see jwkOAuth2TokenStore replacement
   <b:bean id="jwkOAuth2TokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore" >
        <b:constructor-arg index="0" value="${jwtToken.keystore.jwkurl}"/>
   </b:bean>
-->

   <b:bean id="jwkOAuth2TokenStore" 
        class="org.springframework.security.oauth2.provider.token.store.JwtTokenStore" >
        <b:constructor-arg index="0" ref="jwkAccessTokenConverter"/>
   </b:bean>

    <b:bean id="macJwtSigner"
        class="com.progress.appserv.services.security.OEMacVerifier" >
        <b:constructor-arg index="0" value="${jwtToken.signatureAlg}" />
        <b:constructor-arg index="1" value="${jwtToken.macKey}" />
    </b:bean>

    <b:bean id="macJwtVerifier"
        class="com.progress.appserv.services.security.OEMacVerifier" >
        <b:constructor-arg index="0" value="${jwtToken.signatureAlg}" />
        <b:constructor-arg index="1" value="${jwtToken.macKey}" />
    </b:bean>

    <b:bean id="jksJwtSigner"
        class="com.progress.appserv.services.security.OEJksRsaKeySigner" >
        <b:constructor-arg index="0" value="${jwtToken.keystore.path}" />
        <b:constructor-arg index="1" value="${jwtToken.keystore.pwd}" />
        <b:constructor-arg index="2" value="${jwtToken.keystore.alias}" />
        <b:constructor-arg index="3" value="${jwtToken.keystore.type}" />
        <b:property name="keyAlgorithm" value="${jwtToken.signatureAlg}" />
    </b:bean>

    <b:bean id="jksJwtVerifier"
        class="com.progress.appserv.services.security.OEJksRsaKeyVerifier" >
        <b:constructor-arg index="0" value="${jwtToken.keystore.path}" />
        <b:constructor-arg index="1" value="${jwtToken.keystore.pwd}" />
        <b:constructor-arg index="2" value="${jwtToken.keystore.alias}" />
        <b:constructor-arg index="3" value="${jwtToken.keystore.type}" />
        <b:property name="keyAlgorithm" value="${jwtToken.signatureAlg}" />
    </b:bean>

    <b:bean id="pemJwtSigner"
        class="com.progress.appserv.services.security.OEPemRsaKeySigner" >
        <b:constructor-arg index="0" value="${jwtToken.keystore.path}" />
        <b:constructor-arg index="1" value="${jwtToken.keystore.pwd}" />
        <b:constructor-arg index="2" value="${jwtToken.keystore.alias}" />
        <b:constructor-arg index="3" value="${jwtToken.keystore.type}" />
        <b:property name="keyAlgorithm" value="${jwtToken.signatureAlg}" />
    </b:bean>

    <b:bean id="pemJwtVerifier"
        class="com.progress.appserv.services.security.OEPemRsaKeyVerifier" >
        <b:constructor-arg index="0" value="${jwtToken.keystore.path}" />
        <b:constructor-arg index="1" value="${jwtToken.keystore.pwd}" />
        <b:constructor-arg index="2" value="${jwtToken.keystore.alias}" />
        <b:constructor-arg index="3" value="${jwtToken.keystore.type}" />
        <b:property name="keyAlgorithm" value="${jwtToken.signatureAlg}" />
    </b:bean>

    <!-- NOTE: the token substitution is not conditional, so the JWK keystore
         type needs a signer/verifier definition, even when the JWK's 
         are hard-coded.  We are just going to reuse the MAC version that
         can startup when the keystore is not 'mac'. -->
    <b:bean id="jwkJwtSigner"
        class="com.progress.appserv.services.security.OEMacVerifier" >
        <b:constructor-arg index="0" value="${jwtToken.signatureAlg}" />
        <b:constructor-arg index="1" value="${jwtToken.macKey}" />
    </b:bean>

    <b:bean id="jwkJwtVerifier"
        class="com.progress.appserv.services.security.OEMacVerifier" >
        <b:constructor-arg index="0" value="${jwtToken.signatureAlg}" />
        <b:constructor-arg index="1" value="${jwtToken.macKey}" />
    </b:bean>

    <!-- OAuth2 JSON web token converter with symmetric Resource/Authorization keys -->
    <b:bean id="userTokenConverter"
        class="com.progress.appserv.services.security.OEJwtUserAuthenticationConverter" >
        <b:property name="defaultAuthorities" value="${jwtToken.defaultRoles}" />
        <b:property name="jwtUsernameField" value="${jwtToken.usernameField}" />
        <b:property name="mapScopeToAuthority" value="${jwtToken.mapScopeToRole}" />
        <b:property name="scopePrefix" value="${jwtToken.scopeToRolePrefix}" />
        <b:property name="jwtScopeNameField" value="${jwtToken.scopeNameField}"/>
    </b:bean>

    <b:bean id="defaultAccessTokenConverter"
        class="com.progress.appserv.services.security.OEOAuth2AccessTokenConverter" >
        <b:property name="includeGrantType" value="${jwtToken.includeAllClaims}" />
        <b:property name="userTokenConverter" ref="userTokenConverter" />
        <b:property name="includeAllClaims" value="${jwtToken.includeAllClaims}" />
    </b:bean>


    <!--
        class="org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter" >
    -->
    <b:bean id="jwtOAuth2TokenConverter" 
        class="com.progress.appserv.services.security.OEJwtAccessTokenConverter" >
        <b:property name="signer" ref="${jwtToken.keystore.type}JwtSigner" />
        <b:property name="verifier" ref="${jwtToken.keystore.type}JwtVerifier" />
        <b:property name="accessTokenConverter" ref="defaultAccessTokenConverter" />
    </b:bean>

   <b:bean id="jwkAccessTokenConverter" 
       class="org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter" >
       <b:constructor-arg index="0" ref="jwkDefinitionSource" />
       <b:property name="accessTokenConverter" ref="defaultAccessTokenConverter" />
   </b:bean>

   <b:bean id="jwkDefinitionSource" 
       class="org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource" >
       <b:constructor-arg index="0" value="${jwtToken.keystore.jwkurl}"/>
   </b:bean>


</b:beans>
