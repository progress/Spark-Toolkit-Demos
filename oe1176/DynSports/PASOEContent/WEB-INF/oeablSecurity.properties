 ##########################################################################
 ##                                                                      ##
 ## Copyright (c) 2018-2020 by Progress Software Corporation             ##
 ##                                                                      ##
 ## All rights reserved.  No part of this program or document may be     ##
 ## reproduced in any form or by any means without permission in writing ##
 ## from Progress Software Corporation.                                  ##
 ##                                                                      ##
 ##########################################################################
 #
 # Spring Security bean properties definition file for a specific oeabl.war
 # based web applications found in a PASOE instance
 #
 # The properties values found in this file constitute a subset of all Spring
 # Security configuration properties and their values.  Any property value
 # declared in this file will supersede a declaration found in any other
 # oeablSecurity.properties file in the conf/ or ablapps/<ablappname>/conf.
 #
 # PAS for OE will resolve properties by loading multiple .properties files
 # and using the last declared value it finds.  The minimum requirement
 # is that PAS for OE must find one oeablSecurity.properties file in one
 # of the following locations:
 #     1) conf/oeablSecurity.properties
 #     2) [ ablapps/<abl-app-name>/conf/oeablSecurity.properties ]
 #     3) webapps/<web-app-name>/WEB-INF/oeablSecurity.properties
 #
 # The best practice is to declare the properties and values that span
 # multiple ABL business applications and their web applications in the
 # conf/oeablSecurity.properties file.
 #
 # To set a properties and values that apply to all web applications mapped
 # to a single ABL business application, create and declare properties in a
 # ablapps/<abl-app-name>/conf/oeablSecurity.properties
 # 1) create a directory having the name of the deployed ABL application
 #    found in the conf/openedge.properties file
 # 2) Copy the conf/oeablSecurity.properties into that directory
 # 3) Edit the file to contain only the properties that apply to the ABL
 #   application, leaving the conf/oeablSecurity.properties file to hold
 #   the defaults
 #
 # Last, declare the properties and values specific to a web application
 # in the:
 #  /WEB-INF/oeablSecurity.properties file.
 #
 # The web application develop may choose to include the full superset
 # of Spring Security properties in their application's
 #  ablapps/<abl-app-name>/conf/oeablSecurity.properties
 #     OR
 #  WEB-INF/oeablSecurity.properties file.
 #
 # Refer to conf/oeablSecurity.properties for default settings used by
 # all web applications.
 #
 # To use per web application settings, copy the property settings from
 # /conf/oeablSecurity.properties into this file and set the web application
 # specific value.
 #
 # -------------------- oeablSecurity.properties ------------------------------
 # All information about the properties in this property file may be found
 # in the file:
 #
 #          conf/oeablSecurity.properties.README.
 #
 ##########################################################################
 ##
 ##%% version 0001
 ##%% Mar 02, 2016 2:29:12 PM

 ################## Authentication Manager for All Transports #################
 ## Set which Authentication Provider [to user accounts] to use for all
 ## transports.
 ##
 ## The list of names includes:
 ##  local
 ##  extlocal
 ##  ldap
 ##  ad
 ##  oerealm
 ##  sts
 ##
 http.all.authmanager=oerealm

 ################## The HTTP client Authentication model to use ###############
 ## This property controls which HTTP client authentication model to use.  The
 ## allowed names are:
 ##
 ##      name                Description
 ##    ===================================================================
 ##     anonymous            No user login - all clients have public access
 ##     basic                Users authenticate using the HTTP BASIC standard
 ##     form                 Users authenticate using a HTTP POST message &
 ##                          form data
 ##     container            Users authenticate via Tomcat realm services and
 ##                          authorize URL access via Spring Security
 ##     sso                  OpenEdge Single Sign-on using ClientPrincipal
 ##                          access tokens
 ##     oauth2               OpenEdge support for validating OAuth2 JWT
 ##			     tokens for URL Authorization
 ##     saml                 Users authenticate and authorize using SAML token
 ##
 client.login.model=form

 ################## HTTP BASIC Realm name for All Transports ##################
 ## Set the BASIC realm name used by browsers to prompt the user for a
 ## user-id/password.
 ##
 http.all.realm=OpenEdge

 ################## J2EE Tomcat Realm Role mapping ############################
 ## This property is used by the containerLoginModel.xml configuration.  It
 ## provides a [comma separated - no whitespace] list of Role names supplied
 ## by the Tomcat realm login token that will be passed through to Spring's
 ## URL authorization.
 ##
 ## Each PAS for OE transport and the default URI space has its own settable
 ## list. The property http.jee.all.mappableRoles can be used to set all
 ## transports & default at one time.
 ##
 http.jee.all.mappableRoles=ROLE_PSCUser

 ## APSV & SOAP Transport security policies.
 ## Valid values are:
 ##  none        No HTTP authentication or authorization [default]
 ##  basic       enable HTTP BASIC authentication & Roll-based authorization
 ##
 apsv.security.enable=none
 soap.security.enable=none

 ## Properties for the OEClientPrincipalFilter bean (see authFilters.xml)
 ## The security filter that turns a Spring token into an OpenEdge
 ## ClientPrincipal object. The filter is thus responsible for:
 ##  1. Creating a ClientPrincipal if one was not created in a previous
 ##     authentication process step
 ##  2. If the previous authentication process produced a Spring token -
 ##     copy that information into the ClientPrincipal
 ##  3. If the ClientPrincipal is not already sealed - seal it is using this
 ##     filter's domain and registry configuration
 ##  4. If enablecp is true, then send the ClientPrincipal to the ABL business
 ##     logic
 ##
 ## <b:bean id="OEClientPrincipalFilter" ...
 ##
 OEClientPrincipalFilter.enabled=true
 OEClientPrincipalFilter.key=
 OEClientPrincipalFilter.registryFile=ABLDomainRegistry.keystore
 OEClientPrincipalFilter.domain=spark
 OEClientPrincipalFilter.roles=
 OEClientPrincipalFilter.authz=true
 OEClientPrincipalFilter.expires=0
 OEClientPrincipalFilter.accntinfo=false
 OEClientPrincipalFilter.ccid=false
 OEClientPrincipalFilter.anonymous=true
 OEClientPrincipalFilter.sealAnonymous=true
 OEClientPrincipalFilter.appName=OE
 OEClientPrincipalFilter.forwardToken=false
 OEClientPrincipalFilter.passthru=true
 OEClientPrincipalFilter.domainRoleFilter=
 OEClientPrincipalFilter.loadAccntAttrList=
 OEClientPrincipalFilter.validateClientDomain=false

# Declare placeholders for up to 10 OEClientPrincipalFilter
# properties.  Any number of properties larger than 10
# requires customization of authFilters.xml.
#
# Any property 'key' value whose first character is a
# comment (#) is ignored when creating a Client-Principal
# token
 OEClientPrincipalFilter.properties.1.key=#doNotAdd
 OEClientPrincipalFilter.properties.1.value=

 OEClientPrincipalFilter.properties.2.key=#doNotAdd
 OEClientPrincipalFilter.properties.2.value=

 OEClientPrincipalFilter.properties.3.key=#doNotAdd
 OEClientPrincipalFilter.properties.3.value=

 OEClientPrincipalFilter.properties.4.key=#doNotAdd
 OEClientPrincipalFilter.properties.4.value=

 OEClientPrincipalFilter.properties.5.key=#doNotAdd
 OEClientPrincipalFilter.properties.5.value=

 OEClientPrincipalFilter.properties.6.key=#doNotAdd
 OEClientPrincipalFilter.properties.6.value=

 OEClientPrincipalFilter.properties.7.key=#doNotAdd
 OEClientPrincipalFilter.properties.7.value=

 OEClientPrincipalFilter.properties.8.key=#doNotAdd
 OEClientPrincipalFilter.properties.8.value=

 OEClientPrincipalFilter.properties.9.key=#doNotAdd
 OEClientPrincipalFilter.properties.9.value=

 OEClientPrincipalFilter.properties.10.key=#doNotAdd
 OEClientPrincipalFilter.properties.10.value=

 ## Properties for the OECORSFilter Filter bean (see authFilters.xml)
 ## The security filter that implements the CORS standard for controlling
 ## cross site resource access by http clients.
 ##
 ## <b:bean id="OECORSFilter" ...
 ##
 OECORSFilter.allowAll=true
 OECORSFilter.responseHeaders=Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,X-CLIENT-CONTEXT-ID
 OECORSFilter.allowDomains=
 OECORSFilter.allowSubdomains=false
 OECORSFilter.allowMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH
 OECORSFilter.messageHeaders=Accept,Accept-Language,Content-Language,Content-Type,X-CLIENT-CONTEXT-ID,Origin,Access-Control-Request-Headers,Access-Control-Request-Method,Pragma,Cache-control,Authorization
 OECORSFilter.supportCredentials=true
 OECORSFilter.maxAge=-1

 ## Common OpenEdge SSO Producer and Consumer properties
 ## (see properties for OESSOTokenManager, OESSOFilter, OESSORefreshFilter )
 OESSO.error.detail=0
 OESSO.require.https=true

 ## Properties for the OESSOTokenManager bean (see authFilters.xml)
 ## The OESSOTokenManager bean is the primary component for the verification
 ## and generation of OECP SSO tokens.  The OESSOTokenManager works a
 ## supporting role for other Spring filter beans that are actively involved
 ## in the HTTP request authentication process.
 ##
 ## <b:bean id="OESSOTokenManager" ...
 ##
 OESSOTokenManager.tokenPolicy=disabled
 OESSOTokenManager.ssoTokenURLOption=OECP
 OESSOTokenManager.ssoTokenExpires=3600
 OESSOTokenManager.ssoAllowScope=
 OESSOTokenManager.ssoGrantScope=
 OESSOTokenManager.ssoTokenRefresh=true
 OESSOTokenManager.ssoRefreshDeltaTime=3600
 OESSOTokenManager.springRolePrefix=

 ## Properties for the OESSOFilter bean (see authFilters.xml)
 ## The OESSOFilter bean is injected into the HTTP authentication process
 ## to look for HTTP [Authorization] header that contains an OECP SSO token.
 ##
 ## <b:bean id="OESSOFilter" ...
 ##
 OESSOFilter.authPolicy=disabled
 OESSOFilter.authClientType=*

 ## Properties for the OESSORefreshFilter bean (see authFilters.xml)
 ## The OESSORefreshFilter bean is injected into the authentication process
 ## and intercepts client requests to refresh an expired OECS SSO token.
 ##
 ## <b:bean id="OESSORefreshFilter" ...
 ##
 OESSORefreshFilter.refreshURL=/static/auth/token
 OESSORefreshFilter.refreshClientType=*

 ## Properties for the 'ldap' Authentication Manager (see authManagers.xml)
 ##   . URL of the Directory Service (http | https)
 ##   . The X-509 Distinguished Name (DN) of a user account to perform searches
 ##       with
 ##       (NOT the user being authenticated)
 ##   . The password for the X-509 Distinguished Name used to do searches
 ##   . The group object attribute used as a ROLE name granted to the user
 ##         being authenticated
 ##   . The LDAP filter used to find the DN of the groups (aka ROLE) the
 ##         authenticated user is a member of (note min of 1 group required)
 ##   . The LDAP object where the sub-tree group search is initiated
 ##   . The LDAP object where the sub-tree user account search is initiated
 ##   . The LDAP filter used to find the DN of the user being authenticated
 ##
 ##
 ## common ldap property definitions used in multiple locations
 ##

 ldap.url=ldap://localhost:389

 ldap.manager-dn=uid=admin,ou=system
 ldap.manager-password=secret

  ldap.root.dn=

 ldap.grouprole.attribute=cn
 ldap.groupsearch.filter=(member={0})
 ldap.groupsearch.base=

 ldap.usersearch.base=
 ldap.usersearch.filter=(uid={0})


 ## Properties for the 'ldap' Authentication Manager (see authManager.xml)
 ##	The LDAP authentication provider plug-in, with its references to the beans
 ## that implement binding to the service, populating roles, and how to make a
 ## connection.
 ##
 ## Authprovider properties
 ##  1. 'ldap.authprovider.useAuthenticationRequestCredentials' Determines
 ##       whether the supplied password will be used as the credentials in the
 ##       successful authentication token. Default value is false.
 ##
 ## <b:bean id="ldapAuthProvider">
 ##
 ldap.authprovider.useAuthenticationRequestCredentials=false

 ## Properties for the 'ldap' Authentication Manager (see authManager.xml)
 ## The extended LDAP authentication manager configuration is an advanced
 ## version of the simple ldap authentication manager above.  It has many more
 ## properties to control its operations at a much finer granularity.
 ##
 ## <b:bean id="ldapContextSource">
 ##
 ldap.contxtSrc.url=${ldap.url}
 ldap.contxtSrc.base=${ldap.root.dn}
 ldap.contxtSrc.userDn=${ldap.manager-dn}
 ldap.contxtSrc.password=${ldap.manager-password}
 ldap.contxtSrc.referral=ignore
 ldap.contxtSrc.timeout=5000

 ## Search parameters to find the DN of the user being authenticated
 ##
 ##  <b:bean id="ldapSearchBean">
 ##
 ldap.search.base=${ldap.usersearch.base}
 ldap.search.subtree=true
 ldap.serach.attribute=${ldap.usersearch.filter}

 ## Authenticated user group (ROLE) search
 ##
 ##  <b:bean id="ldapAuthoritiesPopulator">
 ##
 ldap.authpopulator.searchBase=${ldap.groupsearch.base}
 ldap.authpopulator.groupSearchFilter=${ldap.groupsearch.filter}
 ldap.authpopulator.groupRoleAttribute=${ldap.grouprole.attribute}
 ldap.authpopulator.searchSubtree=true
 ldap.authpopulator.ignorePartialResultException=true
 ldap.authpopulator.convertToUpperCase=true

 ## Properties for the 'oerealm' Authentication Manager (see authManagers.xml)
 ##
 ## <b:bean id="OERealmAuthProvider">
 ##

 OERealm.AuthProvider.createCPAuthn=true
 OERealm.AuthProvider.sealClientPrincipal=true
 OERealm.AuthProvider.multiTenant=true
 OERealm.AuthProvider.registryFile=ABLDomainRegistry.keystore
 OERealm.AuthProvider.userDomain=spark
 OERealm.AuthProvider.expires=0
 OERealm.AuthProvider.authz=true

 # Declare placeholders for up to 10 OEClientPrincipalFilter
 # properties.  Any number of properties larger than 10
 # requires customization of authFilters.xml.
 #
 # Any property 'key' value whose first character is a
 # comment (#) is ignored when creating a Client-Principal
 # token
 OERealm.AuthProvider.properties.1.key=#doNotAdd
 OERealm.AuthProvider.properties.1.value=

 OERealm.AuthProvider.properties.2.key=#doNotAdd
 OERealm.AuthProvider.properties.2.value=

 OERealm.AuthProvider.properties.3.key=#doNotAdd
 OERealm.AuthProvider.properties.3.value=

 OERealm.AuthProvider.properties.4.key=#doNotAdd
 OERealm.AuthProvider.properties.4.value=

 OERealm.AuthProvider.properties.5.key=#doNotAdd
 OERealm.AuthProvider.properties.5.value=

 OERealm.AuthProvider.properties.6.key=#doNotAdd
 OERealm.AuthProvider.properties.6.value=

 OERealm.AuthProvider.properties.7.key=#doNotAdd
 OERealm.AuthProvider.properties.7.value=

 OERealm.AuthProvider.properties.8.key=#doNotAdd
 OERealm.AuthProvider.properties.8.value=

 OERealm.AuthProvider.properties.9.key=#doNotAdd
 OERealm.AuthProvider.properties.9.value=

 OERealm.AuthProvider.properties.10.key=#doNotAdd
 OERealm.AuthProvider.properties.10.value=


 ## Properties for the 'oerealm' Authentication Manager (see authManagers.xml)
 ##
 ## <b:bean id="OERealmUserDetails"
 ##

 OERealm.UserDetails.realmURL=internal://nxgas
 OERealm.UserDetails.realmClass=Sports.Spark.Core.Security.SportsRealm
 OERealm.UserDetails.grantedAuthorities=ROLE_NoAccess
 OERealm.UserDetails.appendRealmError=false
 OERealm.UserDetails.propertiesAttrName=
 OERealm.UserDetails.userIdAttrName=
 OERealm.UserDetails.realmTokenFile=SparkRealm.cp
 OERealm.UserDetails.rolePrefix=ROLE_
 OERealm.UserDetails.roleAttrName=ATTR_ROLES
 OERealm.UserDetails.enabledAttrName=ATTR_ENABLED
 OERealm.UserDetails.lockedAttrName=ATTR_LOCKED
 OERealm.UserDetails.expiredAttrName=ATTR_EXPIRED
 OERealm.UserDetails.realmPwdAlg=0
 OERealm.UserDetails.certLocation=

 ## Properties for the 'ad' (Active Directory) Authentication Manager (see authManager.xml)
 ##
 ## <b:bean id="adAuthenticationProvider">
 ##
 ad.user.domain=sample.com
 ad.ldap.url=ldap://sample:389
 ad.ldap.rootdn=dc=sample,dc=com

 ## OpenEdge Authentication Gateway client configuration
 ## for direct user logins to a PASOE server
 ##
 sts.AuthProvider.multiTenant=true
 sts.AuthProvider.userDomain=
 sts.UserDetails.stsURL=https://host:port
 sts.UserDetails.stsKeystore=
 sts.UserDetails.noHostVerify=true
 sts.UserDetails.sniHost=


 ## JWT token handler properties for jwtAuthFilter & oauth2.resSvc...
 jwtToken.signatureAlg=HS256
 jwtToken.macKey=oeph3::B8E894037D0A296A0908F2FAFB0A0148
 jwtToken.keystore.type=mac
 jwtToken.keystore.path=${catalina.base}/conf/jwtkeys/jwtRsaKeys.jks
 jwtToken.keystore.jwkurl=https://localhost:8881/path-to-jwk-set
 jwtToken.keystore.userid=
 jwtToken.keystore.pwd=oeph3::B8E894037D0A296A0908F2FAFB0A0148
 jwtToken.keystore.alias=sample
 jwtToken.defaultRoles=
 jwtToken.usernameField=sub
 jwtToken.mapScopeToRole=true
 jwtToken.scopeToRolePrefix=scope.
 jwtToken.includeAllClaims=true
 jwtToken.scopeNameField=scope

 ## OAuth2 Resource server configuration
 oauth2.resSvc.audience=oeablapp
 oauth2.resSvc.stateless=true
 oauth2.resSvc.clientCfg=../oauth2ResSvcClients.cfg
 oauth2.resSvc.requestmatcher=ant
 oauth2.resSvc.csvpath=WEB-INF/oeablSecurityJWT.csv
 oauth2.resSvc.tokenServices=oauth2
 oauth2.resSvc.realmName=oeoauth
 oauth2.resSvc.remoteTokenService.url=https://localhost:443/oauth/check_token
 oauth2.resSvc.remoteTokenService.loginId=changeme
 oauth2.resSvc.remoteTokenService.loginPwd=changme
 oauth2.resSvc.remoteTokenService.tokenName=token


 ## PASOE SAML Token Processing filter
 samlToken.webSSOProcessingFilter.checkForACSEndpointUrl=false
 samlToken.webSSOProcessingFilter.responseSkew=3600

 ## Location of Service Provide And Identity Provider Metatdata xml file
 ## Usually it should be inside WEB-INF/metadata/ folder of the webapp
 samlToken.metadata.spMetaDataFileLocation=WEB-INF/metadata/sp.xml
 samlToken.metadata.idpMetaDataFileLocation=WEB-INF/metadata/idp.xml

 ## Allow Binding Methods of incoming request with
 ## SAML token
 samlToken.httpBinding.allowMethods=GET,POST,PUT,DELETE

 ## SAML UserDetails
 ## Usually roles comes as part of asseration attribute of SAML token
 ## If there roles are configured with multiple attributes then use comma separated list of attributes
 samlToken.UserDetails.roleAttrName=Attribute1,Attribute2
 ## If there is not roles found in SAMl token then use default roles as PSCUser
 samlToken.UserDetails.defaultGrantedAuthorities=PSCUser
 samlToken.UserDetails.rolePrefix=ROLE_
 samlToken.UserDetails.userDomain=
 samlToken.UserDetails.registryFile=

 ## MDC HTTP request header enablement.  Only
 ## the HTTP headers included in this list will
 ## be available as MDC token fields in log files.
 MDC.filter.headerList=


