<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing http authentication control
  -->

<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util.xsd">
    

    <!-- This Spring Security configuration file fragment holds all of the
         security process filter bean definitions for all login models and
         AuthenticationManagers.  The bean definitions all obtain their property 
         values from the oeablSecurity.properties files loaded by the 
         properties-loader.xml configuration file. 
         
         ALL CONFIGURATION SHOULD BE CONTROLLED VIA THE oeablSecurity.properties
         FILE.  IF THIS FILE MUST BE EDITED, USE PROPERTY VARIABLES AND
         ADD A CORRESPONDING ENTRY INTO oeablSecurity.properties.   -->

    <!-- The security filter that turns a Spring token into an OpenEdge
         ClientPrincipal object. The filter is thus responsible for:
         1. Creating a ClientPrincipal if one was not created in a previous authentication process step
         2. If the previous authentication process produced a Spring token - copy that information into the ClientPrincipal
         3. If the ClientPrincipal is not already sealed - seal it using this filter's domain and registry configuration
         4. If enablecp is true, then send the ClientPrincipal to the ABL business logic -->
    <b:bean id="OEClientPrincipalFilter"
             class="com.progress.appserv.services.security.OEClientPrincipalFilter" >
             <b:property name="enablecp" value="${OEClientPrincipalFilter.enabled}" />
             <b:property name="key" value="${OEClientPrincipalFilter.key}" />
             <b:property name="registryFile" value="${OEClientPrincipalFilter.registryFile}" />
             <b:property name="domain" value="${OEClientPrincipalFilter.domain}" />
             <b:property name="roles" value="${OEClientPrincipalFilter.roles}" />
             <b:property name="authz" value="${OEClientPrincipalFilter.authz}" />
             <b:property name="expires" value="${OEClientPrincipalFilter.expires}" />
             <b:property name="accntinfo" value="${OEClientPrincipalFilter.accntinfo}" />
             <b:property name="domainRoleFilter" value="${OEClientPrincipalFilter.domainRoleFilter}" />
             <b:property name="loadAccntAttrList" value="${OEClientPrincipalFilter.loadAccntAttrList:}" />
             <b:property name="forwardToken" value="${OEClientPrincipalFilter.forwardToken:false}" />
             <b:property name="validateClientDomain" value="${OEClientPrincipalFilter.validateClientDomain:false}" />
             <b:property name="properties" >
                <b:map>
                     <b:entry key="${OEClientPrincipalFilter.properties.1.key}" 
                              value="${OEClientPrincipalFilter.properties.1.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.2.key}" 
                              value="${OEClientPrincipalFilter.properties.2.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.3.key}" 
                              value="${OEClientPrincipalFilter.properties.3.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.4.key}" 
                              value="${OEClientPrincipalFilter.properties.4.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.5.key}" 
                              value="${OEClientPrincipalFilter.properties.5.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.6.key}" 
                              value="${OEClientPrincipalFilter.properties.6.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.7.key}" 
                              value="${OEClientPrincipalFilter.properties.7.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.8.key}" 
                              value="${OEClientPrincipalFilter.properties.8.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.9.key}" 
                              value="${OEClientPrincipalFilter.properties.9.value}"/>
                     <b:entry key="${OEClientPrincipalFilter.properties.10.key}" 
                              value="${OEClientPrincipalFilter.properties.10.value}"/>
                </b:map>
             </b:property>
             <b:property name="ccid" value="${OEClientPrincipalFilter.ccid}" />
             <b:property name="anonymous" value="${OEClientPrincipalFilter.anonymous}" />
             <b:property name="appName" value="${OEClientPrincipalFilter.appName}" />
    </b:bean>

    <!-- The security filter that implements the CORS standard for controlling
         cross site resource access by http clients. -->
    <b:bean id="OECORSFilter"
             class="com.progress.appserv.services.security.OECORSFilter" >
             <b:property name="responseHeaders" value="${OECORSFilter.responseHeaders}" />
             <b:property name="allowAll" value="${OECORSFilter.allowAll}" />
             <b:property name="allowDomains" value="${OECORSFilter.allowDomains}" />
             <b:property name="allowSubdomains" value="${OECORSFilter.allowSubdomains}" />
             <b:property name="allowMethods" value="${OECORSFilter.allowMethods}" />
             <b:property name="messageHeaders" value="${OECORSFilter.messageHeaders}" />
             <b:property name="supportCredentials" value="${OECORSFilter.supportCredentials}" />
             <b:property name="maxAge" value="${OECORSFilter.maxAge}" />
    </b:bean>                

    <!-- This bean is called when executing the HTTP BASIC login model and
         the validation of the Authorization header fails.  It will produce 
         a HTTP response for browsers (html) or REST (json) according to the
         accept header. -->
    <b:bean id="OEAuthenticationEntryPoint"
        class="com.progress.appserv.services.security.OEBasicAuthenticationEntryPoint">
        <b:property name="realmName" value="OE" />
    </b:bean>

    <!-- This bean is called when executing the SOAP BASIC login model and
         the validation of the Authorization header fails.  It will produce
         a 401 resource without body -->
    <b:bean id="OEAuthenticationSOAPEntryPoint"
        class="com.progress.appserv.services.security.OEBasicSOAPAuthenticationEntryPoint">
        <b:property name="realmName" value="OE" />
    </b:bean>

    <b:bean id="authenticationLoggerSink"   
        class="com.progress.appserv.services.security.OEAuthenticationLogger" />

    <b:bean id="authorizationLoggerSink"   
        class="com.progress.appserv.services.security.OEAuthorizationLogger" />

    <b:bean id="RequestsIDGenerator"   
        class="com.progress.appserv.services.security.OERequestIDFactory" />

    <b:bean id="MDCPrimaryFilter"
        class="com.progress.appserv.services.security.OEMdcFilter" >
        <b:property name="reqIDFactory" ref="RequestsIDGenerator" />
        <b:property name="logReqStartStop" value="true" />
        <b:property name="updateUIDPolicy" value="0" />
        <b:property name="headerList" value="${MDC.filter.headerList:}" />
    </b:bean>

    <b:bean id="MDCSecondaryFilter"
        class="com.progress.appserv.services.security.OEMdcFilter" >
        <b:property name="reqIDFactory" ref="RequestsIDGenerator" />
        <b:property name="logReqStartStop" value="false" />
        <b:property name="updateUIDPolicy" value="1" />
    </b:bean>

</b:beans>

